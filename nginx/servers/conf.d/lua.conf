server {
        listen       80;
        server_name  lua.nginx01.xietong.com;

        #charset koi8-r;

        access_log  logs/lua.access.log  main;



    #lua项目化(print hello world)
      
      location /lua {
        default_type 'text/html';
        #lua_code_cache off;
        content_by_lua_file /opt/luaapps/lua/test.lua;
      }


    #获取请求参数

      location /lua_var {
      default_type 'text/plain';
        content_by_lua_block {
        ngx.say(ngx.var.arg_a)
        }
      }


  #获取请求类型

  location /lua_request{
       default_type 'text/html';
       #lua_code_cache off;
       content_by_lua_file  /opt/luaapps/lua/lua_request.lua;
   }



  #输出响应

  location /lua_response{
        default_type 'text/html';
        #lua_code_cache off;
        content_by_lua_file /opt/luaapps/lua/lua_response.lua ;
  }

  #输出日志
  location /lua_log{
       default_type 'text/html';
       content_by_lua_file  /opt/luaapps/lua/lua_log.lua;
  }


  #内部调用
  location /lua_sum{
      # 只允许内部调用
      internal;
      # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
      # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
      content_by_lua_block {
         local args = ngx.req.get_uri_args()
         ngx.say(tonumber(args.a) + tonumber(args.b))
      }
  }
  #通过ngx.location.capture去调用内部的location
  location = /lua_sum_test {
    content_by_lua_block {
      local res = ngx.location.capture("/lua_sum", {args={a=3, b=8}})
      ngx.say("status:", res.status, " response:", res.body)
    }  
  }



        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
}

